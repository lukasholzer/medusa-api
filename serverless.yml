service: medusa-rest-api 

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: eu-west-1

  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}-*"


functions:
  create:
    handler: api/customers/create.create
    events:
      - http:
          path: customer
          method: post
          cors: true
  list:
    handler: api/customers/list.list
    events:
      - http:
          path: customer
          method: get
          cors: true
  get:
    handler: api/customers/get.get
    events:
      - http:
          path: customer/{id}
          method: get
          cors: true
  update:
    handler: api/customers/update.update
    events:
      - http:
          path: customer/{id}
          method: put
          cors: true
  delet:
    handler: api/customers/delete.main
    events:
      - http:
          path: customer/{id}
          method: delete
          cors: true

resources:
  Resources:
    CustomersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}-customers
        
plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

package:
  exclude:
    - node_modules/**/*
  include:
    - api/*
    - calls/*